% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sbm_functions.R
\name{sim_calfsbm}
\alias{sim_calfsbm}
\title{CALF-SBM Network Generation Function}
\usage{
sim_calfsbm(
  n_nodes,
  K,
  n_covar,
  prob,
  beta0,
  beta,
  sigma,
  spat,
  directed = FALSE
)
}
\arguments{
\item{n_nodes}{A positive integer representing the total number of nodes in 
the network to be generated}

\item{K}{A positive integer indicating the true number of clusters in the 
network to be generated.}

\item{n_covar}{A positive integer indicating the number of node-specific
covariates to generate. As part of the list object returned by the function, 
there will be an n_nodes by n_covar matrix representing the covariates.}

\item{prob}{Vector of weights of being in each group. This should be
a numeric vector of length \code{K}, and can be either a vector of weights 
or a vector of probabilities}

\item{beta0}{Numeric value for the CALF-SBM's intercept term. Lower values 
correspond to higher sparsity}

\item{beta}{\code{K}-by-\code{K} numeric matrix of within and between-cluster 
coefficients. Diagonal values correspond to within-cluster effects. If the 
network is undirected, this matrix should be symmetric.}

\item{sigma}{Non-negative number for the standard deviation of the random 
effects offset term, set to 0 if not using offset}

\item{spat}{Non-negative number to represent the ratio of between-cluster 
variance to within-cluster variance of the covariates. 0 indicates no signal}

\item{directed}{Logical; if \code{FALSE} (default), the MCMC output is from 
an undirected network}
}
\value{
List of adjacency, membership, link probability, and distance
}
\description{
Generates network using probabilities, betas, and signal strength
}
\examples{
n <- 100
K_tru <- 2
m <- 2
sizes <- rep(1 / K_tru, K_tru)
beta_0 <- 1
beta_mat <- diag(K_tru) - 3
hetero <- 0.3
sn_ratio <- 1.5
links <- sim_calfsbm(n, K_tru, m, sizes, beta_0, beta_mat, hetero, sn_ratio)
## Using adjacency and true clustering, get the density of each block
print(find_sbm(links$A, links$z))

}
